üîπ Segundo Trecho
O valor do software n√£o e dado para o funcionamento atual e sim em se manter √∫til e sustent√°vel ao longo do tempo. Para que isso aconte√ßa pr√°ticas que considerem processos, ferramentas e cultura organizacional s√£o exigidas, n√£o somente algoritmos e sintaxes.
Programa√ß√£o √© o ato imediato, mas engenharia de software √© o resultado de programa√ß√£o mais tempo, isso significa refletir sobre como o c√≥digo lida com mudan√ßas inevit√°veis,como permanece compreens√≠vel para novos desenvolvedores e como evolui sem acumular
d√≠vidas t√©cnicas que comprometam sua qualidade. Nessa perspectiva, a manuten√ß√£o deixa de ser uma atividade secund√°ria e passa a ocupar um papel essencial no ciclo de vida do software.
Os tr√™s princ√≠pios fundamentais destacados pelo autor s√£o Tempo e Mudan√ßa, Escala e Crescimento e Compensa√ß√µes e Custos. O primeiro ressalta que um c√≥digo que n√£o muda est√° morto, 
pois todo software relevante precisa evoluir para atender novas necessidades ou corrigir falhas, e o grande desafio √© projetar sistemas capazes de mudar sem se quebrar.
O segundo princ√≠pio mostra que o software n√£o cresce sozinho, mas junto com a organiza√ß√£o, j√° que times aumentam, produtos se expandem e a complexidade se multiplica, por isso, 
s√£o necess√°rias pr√°ticas de coordena√ß√£o, padr√µes de qualidade e ferramentas de colabora√ß√£o que sustentem esse crescimento. O terceiro princ√≠pio lembra que toda decis√£o 
em engenharia envolve custos, seja de tempo, desempenho, complexidade ou dinheiro. Nem sempre a solu√ß√£o mais elegante √© a melhor, e por isso √© fundamental que as escolhas sejam feitas de forma consciente, 
considerando o contexto, as prioridades e os efeitos de longo prazo.

